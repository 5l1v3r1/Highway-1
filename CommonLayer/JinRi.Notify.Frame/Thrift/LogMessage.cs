#if THRIFT
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace JinRi.Notify.Frame.Thrift
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class LogMessage : TBase
    {
        private int _Id;
        private string _Ikey;
        private string _Username;
        private long _LogTime;
        private string _ClientIP;
        private string _ServerIP;
        private string _Module;
        private string _OrderNo;
        private string _LogType;
        private string _Keyword;
        private string _Content;
        private bool _IsHandle;

        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                __isset.Id = true;
                this._Id = value;
            }
        }

        public string Ikey
        {
            get
            {
                return _Ikey;
            }
            set
            {
                __isset.Ikey = true;
                this._Ikey = value;
            }
        }

        public string Username
        {
            get
            {
                return _Username;
            }
            set
            {
                __isset.Username = true;
                this._Username = value;
            }
        }

        public long LogTime
        {
            get
            {
                return _LogTime;
            }
            set
            {
                __isset.LogTime = true;
                this._LogTime = value;
            }
        }

        public string ClientIP
        {
            get
            {
                return _ClientIP;
            }
            set
            {
                __isset.ClientIP = true;
                this._ClientIP = value;
            }
        }

        public string ServerIP
        {
            get
            {
                return _ServerIP;
            }
            set
            {
                __isset.ServerIP = true;
                this._ServerIP = value;
            }
        }

        public string Module
        {
            get
            {
                return _Module;
            }
            set
            {
                __isset.Module = true;
                this._Module = value;
            }
        }

        public string OrderNo
        {
            get
            {
                return _OrderNo;
            }
            set
            {
                __isset.OrderNo = true;
                this._OrderNo = value;
            }
        }

        public string LogType
        {
            get
            {
                return _LogType;
            }
            set
            {
                __isset.LogType = true;
                this._LogType = value;
            }
        }

        public string Keyword
        {
            get
            {
                return _Keyword;
            }
            set
            {
                __isset.Keyword = true;
                this._Keyword = value;
            }
        }

        public string Content
        {
            get
            {
                return _Content;
            }
            set
            {
                __isset.Content = true;
                this._Content = value;
            }
        }

        public bool IsHandle
        {
            get
            {
                return _IsHandle;
            }
            set
            {
                __isset.IsHandle = true;
                this._IsHandle = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool Id;
            public bool Ikey;
            public bool Username;
            public bool LogTime;
            public bool ClientIP;
            public bool ServerIP;
            public bool Module;
            public bool OrderNo;
            public bool LogType;
            public bool Keyword;
            public bool Content;
            public bool IsHandle;
        }

        public LogMessage()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I32)
                        {
                            Id = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == TType.String)
                        {
                            Ikey = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == TType.String)
                        {
                            Username = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == TType.I64)
                        {
                            LogTime = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == TType.String)
                        {
                            ClientIP = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 6:
                        if (field.Type == TType.String)
                        {
                            ServerIP = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 7:
                        if (field.Type == TType.String)
                        {
                            Module = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 8:
                        if (field.Type == TType.String)
                        {
                            OrderNo = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 9:
                        if (field.Type == TType.String)
                        {
                            LogType = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 10:
                        if (field.Type == TType.String)
                        {
                            Keyword = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 11:
                        if (field.Type == TType.String)
                        {
                            Content = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 12:
                        if (field.Type == TType.Bool)
                        {
                            IsHandle = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("LogMessage");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.Id)
            {
                field.Name = "Id";
                field.Type = TType.I32;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(Id);
                oprot.WriteFieldEnd();
            }
            if (Ikey != null && __isset.Ikey)
            {
                field.Name = "Ikey";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Ikey);
                oprot.WriteFieldEnd();
            }
            if (Username != null && __isset.Username)
            {
                field.Name = "Username";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Username);
                oprot.WriteFieldEnd();
            }
            if (__isset.LogTime)
            {
                field.Name = "LogTime";
                field.Type = TType.I64;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(LogTime);
                oprot.WriteFieldEnd();
            }
            if (ClientIP != null && __isset.ClientIP)
            {
                field.Name = "ClientIP";
                field.Type = TType.String;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ClientIP);
                oprot.WriteFieldEnd();
            }
            if (ServerIP != null && __isset.ServerIP)
            {
                field.Name = "ServerIP";
                field.Type = TType.String;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ServerIP);
                oprot.WriteFieldEnd();
            }
            if (Module != null && __isset.Module)
            {
                field.Name = "Module";
                field.Type = TType.String;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Module);
                oprot.WriteFieldEnd();
            }
            if (OrderNo != null && __isset.OrderNo)
            {
                field.Name = "OrderNo";
                field.Type = TType.String;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(OrderNo);
                oprot.WriteFieldEnd();
            }
            if (LogType != null && __isset.LogType)
            {
                field.Name = "LogType";
                field.Type = TType.String;
                field.ID = 9;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(LogType);
                oprot.WriteFieldEnd();
            }
            if (Keyword != null && __isset.Keyword)
            {
                field.Name = "Keyword";
                field.Type = TType.String;
                field.ID = 10;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Keyword);
                oprot.WriteFieldEnd();
            }
            if (Content != null && __isset.Content)
            {
                field.Name = "Content";
                field.Type = TType.String;
                field.ID = 11;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Content);
                oprot.WriteFieldEnd();
            }
            if (__isset.IsHandle)
            {
                field.Name = "IsHandle";
                field.Type = TType.Bool;
                field.ID = 12;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(IsHandle);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("LogMessage(");
            bool __first = true;
            if (__isset.Id)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Id: ");
                __sb.Append(Id);
            }
            if (Ikey != null && __isset.Ikey)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Ikey: ");
                __sb.Append(Ikey);
            }
            if (Username != null && __isset.Username)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Username: ");
                __sb.Append(Username);
            }
            if (__isset.LogTime)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("LogTime: ");
                __sb.Append(LogTime);
            }
            if (ClientIP != null && __isset.ClientIP)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ClientIP: ");
                __sb.Append(ClientIP);
            }
            if (ServerIP != null && __isset.ServerIP)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ServerIP: ");
                __sb.Append(ServerIP);
            }
            if (Module != null && __isset.Module)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Module: ");
                __sb.Append(Module);
            }
            if (OrderNo != null && __isset.OrderNo)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("OrderNo: ");
                __sb.Append(OrderNo);
            }
            if (LogType != null && __isset.LogType)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("LogType: ");
                __sb.Append(LogType);
            }
            if (Keyword != null && __isset.Keyword)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Keyword: ");
                __sb.Append(Keyword);
            }
            if (Content != null && __isset.Content)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Content: ");
                __sb.Append(Content);
            }
            if (__isset.IsHandle)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsHandle: ");
                __sb.Append(IsHandle);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }
}
#endif
