//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace JinRi.Notify.ServiceAgent.InstructionServiceSOA {
    using System;
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="BeatResultEnum", Namespace="http://schemas.datacontract.org/2004/07/JinRi.Notify.Model")]
    public enum BeatResultEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskMessageStatusEnum", Namespace="http://schemas.datacontract.org/2004/07/JinRi.Notify.Model")]
    public enum TaskMessageStatusEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Executed = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/JinRi.Notify.Model")]
    public enum TaskTypeEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InterfaceClearCache = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Reboot = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InstructionServiceSOA.IInstructionService")]
    public interface IInstructionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/RegisterServer", ReplyAction="http://tempuri.org/IInstructionService/RegisterServerResponse")]
        bool RegisterServer(JinRi.Notify.DTO.BeatMessage beatMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/RegisterServer", ReplyAction="http://tempuri.org/IInstructionService/RegisterServerResponse")]
        System.Threading.Tasks.Task<bool> RegisterServerAsync(JinRi.Notify.DTO.BeatMessage beatMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/HeartBeat", ReplyAction="http://tempuri.org/IInstructionService/HeartBeatResponse")]
        JinRi.Notify.DTO.BeatResult HeartBeat(JinRi.Notify.DTO.BeatMessage beatMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/HeartBeat", ReplyAction="http://tempuri.org/IInstructionService/HeartBeatResponse")]
        System.Threading.Tasks.Task<JinRi.Notify.DTO.BeatResult> HeartBeatAsync(JinRi.Notify.DTO.BeatMessage beatMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/CreateTask", ReplyAction="http://tempuri.org/IInstructionService/CreateTaskResponse")]
        bool CreateTask(JinRi.Notify.DTO.TaskMessage taskMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/CreateTask", ReplyAction="http://tempuri.org/IInstructionService/CreateTaskResponse")]
        System.Threading.Tasks.Task<bool> CreateTaskAsync(JinRi.Notify.DTO.TaskMessage taskMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/GetTaskMessageList", ReplyAction="http://tempuri.org/IInstructionService/GetTaskMessageListResponse")]
        System.Collections.Generic.List<JinRi.Notify.DTO.TaskMessage> GetTaskMessageList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/GetTaskMessageList", ReplyAction="http://tempuri.org/IInstructionService/GetTaskMessageListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<JinRi.Notify.DTO.TaskMessage>> GetTaskMessageListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/GetAllServers", ReplyAction="http://tempuri.org/IInstructionService/GetAllServersResponse")]
        System.Collections.Generic.List<string> GetAllServers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstructionService/GetAllServers", ReplyAction="http://tempuri.org/IInstructionService/GetAllServersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllServersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInstructionServiceChannel : JinRi.Notify.ServiceAgent.InstructionServiceSOA.IInstructionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InstructionServiceClient : System.ServiceModel.ClientBase<JinRi.Notify.ServiceAgent.InstructionServiceSOA.IInstructionService>, JinRi.Notify.ServiceAgent.InstructionServiceSOA.IInstructionService {
        
        public InstructionServiceClient() {
        }
        
        public InstructionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InstructionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InstructionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InstructionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterServer(JinRi.Notify.DTO.BeatMessage beatMessage) {
            return base.Channel.RegisterServer(beatMessage);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterServerAsync(JinRi.Notify.DTO.BeatMessage beatMessage) {
            return base.Channel.RegisterServerAsync(beatMessage);
        }
        
        public JinRi.Notify.DTO.BeatResult HeartBeat(JinRi.Notify.DTO.BeatMessage beatMessage) {
            return base.Channel.HeartBeat(beatMessage);
        }
        
        public System.Threading.Tasks.Task<JinRi.Notify.DTO.BeatResult> HeartBeatAsync(JinRi.Notify.DTO.BeatMessage beatMessage) {
            return base.Channel.HeartBeatAsync(beatMessage);
        }
        
        public bool CreateTask(JinRi.Notify.DTO.TaskMessage taskMessage) {
            return base.Channel.CreateTask(taskMessage);
        }
        
        public System.Threading.Tasks.Task<bool> CreateTaskAsync(JinRi.Notify.DTO.TaskMessage taskMessage) {
            return base.Channel.CreateTaskAsync(taskMessage);
        }
        
        public System.Collections.Generic.List<JinRi.Notify.DTO.TaskMessage> GetTaskMessageList() {
            return base.Channel.GetTaskMessageList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<JinRi.Notify.DTO.TaskMessage>> GetTaskMessageListAsync() {
            return base.Channel.GetTaskMessageListAsync();
        }
        
        public System.Collections.Generic.List<string> GetAllServers() {
            return base.Channel.GetAllServers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllServersAsync() {
            return base.Channel.GetAllServersAsync();
        }
    }
}
